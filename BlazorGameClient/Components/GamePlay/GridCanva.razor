@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorGameQuestClassLib

<BECanvas @ref="canvasReference"
            Width="@CANVA_WIDTH"
            Height="@CANVA_HEIGHT">
</BECanvas>


@code {
    private BECanvasComponent? canvasReference;
    private Canvas2DContext context=null!;
    private GameGrid gameGrid;
    public readonly int NB_SPRITE_LARGEUR = GameGrid.NB_SPRITE_LARGEUR;
    public readonly int NB_SPRITE_LONGUEUR = GameGrid.NB_SPRITE_LONGUEUR;
    public readonly int SPRITE_SIZE = GameGrid.SPRITE_SIZE;
    public readonly int CANVA_X = 0;
    public readonly int CANVA_Y = 0;
    public readonly int CANVA_WIDTH;
    public readonly int CANVA_HEIGHT;

    @* private int _mouseX;
    private int _mouseY; *@
    public GridCanva()
    {
        gameGrid = new GameGrid { Id = 0, Name = "test.csv" };
        CANVA_WIDTH =  NB_SPRITE_LONGUEUR* SPRITE_SIZE;
        CANVA_HEIGHT = NB_SPRITE_LARGEUR * SPRITE_SIZE;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvasReference.CreateCanvas2DAsync();
            await DrawGrid();
        }
    }
    private async Task DrawGrid()
    {
        await context.ClearRectAsync(0, 0, CANVA_WIDTH, CANVA_HEIGHT);


        for (int y = 0; y < NB_SPRITE_LARGEUR; y++)
        {
            for (int x = 0; x < NB_SPRITE_LONGUEUR; x++)
            {
                var color = (x + y) % 2 == 0 ? "lightgray" : "white";

                await context.SetFillStyleAsync(color);
                await context.FillRectAsync(x * SPRITE_SIZE, y * SPRITE_SIZE, SPRITE_SIZE, SPRITE_SIZE);
                
                await context.SetStrokeStyleAsync("black");
                await context.StrokeRectAsync(x * SPRITE_SIZE, y * SPRITE_SIZE, SPRITE_SIZE, SPRITE_SIZE);
            }
        }
    }

    @* private void OnMouseMove(MouseEventArgs e)
    {
        // inversion pour la cohÃ©rence de la matrice grid
        _mouseX = (int)(e.OffsetY/SPRITE_SIZE);
        _mouseY = (int)(e.OffsetX/SPRITE_SIZE);



        //Console.WriteLine($"Cellule : {cellX}, {cellY}");
    }
    private void OnMouseClick(MouseEventArgs e)
    {
        Console.WriteLine($"Cellule : {_mouseX}, {_mouseY}");
    } *@

}