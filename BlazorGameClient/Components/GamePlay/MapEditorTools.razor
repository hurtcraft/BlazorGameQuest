@using BlazorGameQuestClassLib
@using MudBlazor
@inject DonjonService DonjonService

@inject HttpClient Http
@inject IDialogService DialogService

<MudPaper Class="w-80" Style="max-width: 350px;">

    <MudList T="string">
        <MudListItem Text="Charger map" Icon="@Icons.Material.Filled.Download" >
           
        </MudListItem>
        <MudListItem @onclick="OpenDialog" Text="DÃ©ployer map" Icon="@Icons.Material.Filled.Send" />

        


        <MudDivider />

        <MudListItem Icon="@Icons.Material.Filled.Image" Text="Map Assets">
            <NestedList>
                <div style="max-height:300px; overflow:auto; padding:0;">  <!-- conteneur scrollable -->
                    <MudGrid>
                        @for (int i = 0; i < 100; i++)
                        {
                            var index = i;
                            bool isSelected = selectedTile == index;
                            string mapTile = GameAsset.ListMapTile[i];
                            <MudItem>
                            
                                <img src=@mapTile
                                    alt=@($"Tile {index:D3}")
                                    width="32px" height="32px"
                                    style=@($"object-fit:cover; border:2px solid {(isSelected ? "red" : "#ccc")}; margin:0; cursor:pointer;")
                                    @onclick="() => TileOnClick(index)" />
                            </MudItem>
                        }
                    </MudGrid>
                </div>
            </NestedList>
        </MudListItem>


        <MudListItem Icon="@Icons.Material.Filled.Image" Text="Mob Assets">
            <NestedList>
                <MudGrid >
                    @for (int i = 0; i < 10; i++)
                    {
                        <MudItem>
                            <MudPaper
                                Style="width:32px; height:32px; background-color:#1976d2; display:flex; align-items:center; justify-content:center; color:white;">
                                @i
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </NestedList>
        </MudListItem>
        @* <MudImage Src="assets/DungeonAssets/2D Pixel Dungeon Asset Pack/Dungeon_Character_at.png" Alt="Here's Johnny" Elevation="25" Class="rounded-lg ma-4" FallbackSrc="images/mony.jpg" /> *@


    </MudList>
</MudPaper>


@code {
    private int? selectedTile = null;
    private string LastMapName=string.Empty;

    [Parameter] public required Donjon donjon { get; set; }


    private void TileOnClick(int index)
    {
        selectedTile = selectedTile == index ? null : index;
        GameAsset.currentMapTile=selectedTile;

        Console.WriteLine("tile : "+GameAsset.currentMapTile);
    }

    private async Task OpenDialog()
    {   
        var parameters=new DialogParameters<DeployMapDialog>{{x=>x.donjon,donjon}};
        var dialog = await DialogService.ShowAsync<DeployMapDialog>("deploy map",parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is Donjon d)
        {
            donjon.Difficulty=d.Difficulty;
            donjon.Name=d.Name;
            string t= await DonjonService.TestAsync();
            Console.WriteLine(t);

            await SaveDonjon(donjon);
            Console.WriteLine($"Nom : {donjon.Name}, Difficulty : {donjon.Difficulty} {donjon.Id}");
        }
    }
    private async Task SaveDonjon(Donjon donjon)
    {
        await DonjonService.SaveDonjonAsync(donjon);

    }

}